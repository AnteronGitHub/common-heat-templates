---
heat_template_version: 2018-03-02

description: Heat stack containing a server in a newly created access network.

parameters:

  # Required parameters
  # ~~~~~~~~~~~~~~~~~~~
  public_net:
    type: string
    description: Name of the public net routed to access net

  server_image:
    type: string
    description: VM image used for the server

  server_flavor:
    type: string
    description: VM flavor used for the server

  server_key_name:
    type: string
    description: Name of the SSH keypair used for the server admin user

  # Optional parameters
  # ~~~~~~~~~~~~~~~~~~~
  server_security_group_name:
    type: string
    description: Name of the server security group
    default: server_security_group

  server_security_group_remote_ip_prefix:
    type: string
    description: CIDR for allowed network access to the server
    default: 0.0.0.0/0

  server_name:
    type: string
    description: Name of the server
    default: server

resources:

  # Network resources
  # ~~~~~~~~~~~~~~~~~
  access_net:
    type: ../network/access-net.yaml
    properties:
      public_net: { get_param: public_net }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: server_security_group_name }
      rules:
        - remote_ip_prefix: { get_param: server_security_group_remote_ip_prefix }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: { get_param: server_security_group_remote_ip_prefix }
          protocol: icmp

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_attr: [ access_net, private_net ] }
      fixed_ips:
        - subnet_id: { get_attr: [ access_net, private_subnet ] }
      security_groups:
        - { get_resource: server_security_group }

  server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server_port }

  server_floating_ip_association:
        type: OS::Neutron::FloatingIPAssociation
        properties:
            floatingip_id: { get_resource: server_floating_ip }
            port_id: { get_resource: server_port }

  # Configuration resources
  # ~~~~~~~~~~~~~~~~~~~~~~~
  server_base_config:
    type: ../config/base-config.yaml

  # Computing resources
  # ~~~~~~~~~~~~~~~~~~~
  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: server_name }
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      key_name: { get_param: server_key_name }
      networks:
        - port: { get_resource: server_port }
      user_data_format: RAW
      user_data: { get_resource: server_base_config }

outputs:

  server_floating_ip:
    description: Floating IP associated with the created server
    value: { get_attr: [ server_floating_ip, floating_ip_address ] }
